@page "/tasting/vote/{TastingId:int}"
@page "/tasting/vote/{TastingId:int}/{Beernumber:int}"
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Beertasting.ViewModels
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IBeertastingRepository _db
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager _nav

<MudText Typo="Typo.h3" Class="pa-4">Beertasting</MudText>
<MudText Typo="Typo.h4" Class="pa-4">Vote</MudText>


@if (currentTaster == null || currentTasting == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">𒍼</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@currentTaster.DisplayName</MudText>
                <MudText Typo="Typo.body2">@currentTaster.EmailAddress</MudText>
            </CardHeaderContent>
        </MudCardHeader>
    </MudCard>

    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">ØL</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@currentTasting.Name</MudText>
                <MudText Typo="Typo.body2">@currentTasting.Description</MudText>
                <MudText Typo="Typo.body2">@currentTasting.IsBlind</MudText>
                <MudText Typo="Typo.body2">@currentTasting.IsActive</MudText>
                <MudText Typo="Typo.body2">@currentTasting.TastingDate</MudText>
                <MudText Typo="Typo.body2">Number of beers: @tastingBeers?.Count</MudText>
                
                <MudText Typo="Typo.body2">Your score: @CalculatedScore</MudText>
            </CardHeaderContent>
        </MudCardHeader>
    </MudCard>
    <MudPaper>
        <MudGrid Class="pa-4"> 
            <MudItem xs="12" sm="4"><MudText Style="font-style:oblique; text-align:right">Taste:</MudText></MudItem>
            <MudItem xs="12" sm="8"><MudSlider @bind-Value="ScoreTaste" Min="0" Max="10" Step="0.5" Color="Color.Primary">Value: @ScoreTaste.ToString("F1")</MudSlider></MudItem>

            <MudItem xs="12" sm="4"><MudText Style="font-style:oblique; text-align:right">Appearance:</MudText></MudItem>
            <MudItem xs="12" sm="8"><MudSlider @bind-Value="ScoreAppearance" Min="0" Max="10" Step="0.5" Color="Color.Secondary">Value: @ScoreAppearance.ToString("F1")</MudSlider></MudItem>

            <MudItem xs="12" sm="4"><MudText Style="font-style:oblique; text-align:right">Overall:</MudText></MudItem>
            <MudItem xs="12" sm="8"><MudSlider @bind-Value="ScoreOverall" Min="0" Max="10" Step="0.5" Color="Color.Tertiary">Value: @ScoreOverall.ToString("F1")</MudSlider></MudItem>
        </MudGrid>
    </MudPaper>

}

@code
{
    [Parameter]
    public int TastingId { get; set; }
    
    [Parameter]
    public int BeerNumber { get; set; } = 0;
    private TastingModel? currentTasting = null;
    private TasterModel? currentTaster = null;
    private List<TastingBeerModel>? tastingBeers = null;

    private Double ScoreTaste = 0.0f;
    private Double ScoreAppearance = 0.0f;
    private Double ScoreOverall = 0.0f;
    private Double CalculatedScore => (ScoreTaste * 2 + ScoreAppearance + ScoreOverall) / 4;
    private async Task initializeTaster()
    {
        var retryCount = 10;
        while (currentTaster is null && retryCount-- > 0)
        {
            if (ProtectedSessionStore is null)
            {
                Thread.Sleep(100);
                continue;
            }

            var t = await ProtectedSessionStore.GetAsync<TasterModel>("taster");

            if (t.Success)
            {
                currentTaster = t.Value;
                break;
            }

            Thread.Sleep(50);
        }
        if (currentTaster is null)
            throw new Exception("Taster not found!");
    }

    protected override async Task OnInitializedAsync()
    {
        await initializeTaster();

        currentTasting = await _db.GetTasting(TastingId);

        if (currentTasting == null)
        {
            _nav.NavigateTo("/tastingNotFound");
            return;
        }

        if (!currentTasting.IsActive)
        {
            _nav.NavigateTo("/nicetry");
            return;
        }



        currentTaster = await _db.GetTaster(currentTaster.TasterId);
        tastingBeers = await _db.GetTastingBeers(TastingId);

        //tastings = await _db.GetTastingsForTaster(currentTaster.TasterId);
        //votedBeers = await _db.GetTasterBeerVotes(currentTaster.TasterId);
    }
}
