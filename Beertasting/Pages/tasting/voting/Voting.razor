@page "/tasting/vote/{TastingId:int}"
@page "/tasting/vote/{TastingId:int}/{Beernumber:int}"
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Beertasting.ViewModels
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IBeertastingRepository _db
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager _nav
@inject IDialogService DialogService

<MudText Typo="Typo.h3" Class="pa-4">Beertasting</MudText>
<MudText Typo="Typo.h4" Class="pa-4">Vote</MudText>


@if (currentTaster == null || currentTasting == null || (tastingBeers is null || !tastingBeers.Any()))
{
    <p><em>Loading...</em></p>
}
else
{
    <MudPaper>
        <MudCarousel @ref="_carousel" ItemsSource="@tastingBeers" Style="height:80vh;" ShowArrows="true" ShowDelimiters="false" AutoCycle="false" SelectedIndexChanged="@IndexChanged" ArrowsPosition="Position.Top">
            <PreviousButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.ArrowBackIos" Color="@Color.Primary" />
                    </span>
                </div>
            </PreviousButtonTemplate>
            <NextButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Outlined.ArrowForwardIos" Color="@Color.Primary" />
                    </span>
                </div>
            </NextButtonTemplate>
            <ItemTemplate>
                <br /><br />
                <div class="d-flex flex-column flex-column align-top" style="height:100%">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Primary">@context.SortOrder</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@context.BeerModel.Name (@context.BeerModel.ABV %)</MudText>
                                <MudText Typo="Typo.caption">@context.BeerModel.BeerStyleModel.Name - @context.BeerModel.BeerclassModel?.Name</MudText>
                                <MudText Typo="Typo.body1">@context.BeerModel.BreweryModel.Name</MudText>
                                <MudText Typo="Typo.caption">@context.BeerModel.BreweryModel.Country</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                    </MudCard>
                    <MudGrid Class="pa-4">
                        <MudItem xs="12" sm="12"><MudSlider T="double" ValueChanged="@((Value) => TasteChanged(Value, context))" Value="context.VoteModel.Taste" Min="0" Max="10" Step="0.5" Color="Color.Primary">Taste: @context.VoteModel.Taste.ToString("F1")</MudSlider></MudItem>
                        <MudItem xs="12" sm="12"><MudSlider T="double" ValueChanged="@((Value) => AppearanceChanged(Value, context))" Value="context.VoteModel.Appearance" Min="0" Max="10" Step="0.5" Color="Color.Secondary">Appearance: @context.VoteModel.Appearance.ToString("F1")</MudSlider></MudItem>
                        <MudItem xs="12" sm="12"><MudSlider T="double" ValueChanged="@((Value) => OverallChanged(Value, context))" Value="context.VoteModel.Overall" Min="0" Max="10" Step="0.5" Color="Color.Tertiary">Overall: @context.VoteModel.Overall.ToString("F1")</MudSlider></MudItem>
                        <MudItem xs="12" sm="12"><MudTextField Lines="3" TextChanged="@((Value) => NoteChanged(Value, context))" Label="Note" Value="context.VoteModel.Note" Variant="Variant.Outlined" /></MudItem>
                        <MudItem xs="12" sm="12"><MudButton Disabled="@(!context.IsDirty)" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="@(() => SaveVote(context))">VOTE</MudButton></MudItem>
                    </MudGrid>
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudPaper>
}

@code
{
    private MudCarousel<TastingBeerModel> _carousel;
    private IList<string> _source = new List<string>() { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

    [Parameter]
    public int TastingId { get; set; }

    [Parameter]
    public int BeerNumber { get; set; } = 0;
    private TastingModel? currentTasting = null;
    private TasterModel? currentTaster = null;
    private List<TastingBeerModel>? tastingBeers = null;

    private async Task TasteChanged(double d, TastingBeerModel tbm)
    {
        if (tbm.VoteModel.Taste == d)
            return;

        tbm.VoteModel.Taste = d;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private async Task AppearanceChanged(double d, TastingBeerModel tbm)
    {
        if (tbm.VoteModel.Appearance == d)
            return;

        tbm.VoteModel.Appearance = d;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private async Task OverallChanged(double d, TastingBeerModel tbm)
    {
        if (tbm.VoteModel.Overall == d)
            return;

        tbm.VoteModel.Overall = d;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private async Task NoteChanged(string value, TastingBeerModel tbm)
    {
        if (string.Equals(value, tbm.VoteModel.Note, StringComparison.InvariantCultureIgnoreCase))
            return;

        tbm.VoteModel.Note = value;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private async Task SaveVote(TastingBeerModel tbm)
    {
        tbm.IsDirty = false;

        var vote = tbm.VoteModel;
        if (vote != null && vote.VoteId is null)
        {
            await _db.AddVote(vote);

            tbm.VoteModel = await _db.GetVote(tbm.VoteModel.TasterId, tbm.BeerId, tbm.TastingId);

        }
        else if (vote != null && vote.VoteId != null)
        {
            await _db.UpdateVote(vote);
        }

        StateHasChanged();
    }

    private async Task initializeTaster()
    {
        var retryCount = 10;
        while (currentTaster is null && retryCount-- > 0)
        {
            if (ProtectedSessionStore is null)
            {
                Thread.Sleep(100);
                continue;
            }

            var t = await ProtectedSessionStore.GetAsync<TasterModel>("taster");

            if (t.Success)
            {
                currentTaster = t.Value;
                break;
            }

            Thread.Sleep(50);
        }
        if (currentTaster is null)
            throw new Exception("Taster not found!");
    }

    private async Task IndexChanged(int index)
    {
        if (tastingBeers.Any(x => x.IsDirty))
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", $"Unsaved vote(s), save before moving on?");
            parameters.Add("ButtonText", "SAVE");
            parameters.Add("Color", Color.Success);

            var dialog = DialogService.Show<QueryDialog>("Save vote(s)", parameters);
            var result = await dialog.Result;

            if (result.Cancelled) return;

            foreach (var tbm in tastingBeers.Where(x => x.IsDirty))
            {
                await SaveVote(tbm);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await initializeTaster();

        currentTasting = await _db.GetTasting(TastingId);

        if (currentTasting == null)
        {
            _nav.NavigateTo("/tastingNotFound");
            return;
        }

        if (!currentTasting.IsActive)
        {
            _nav.NavigateTo("/nicetry");
            return;
        }

        currentTaster = await _db.GetTaster(currentTaster.TasterId);
        tastingBeers = await _db.GetTastingBeers(TastingId);


        foreach (var tb in tastingBeers)
        {
            if (currentTasting.IsBlind)
                tb.Anonymize();

            tb.VoteModel = await _db.GetVote(currentTaster.TasterId, tb.BeerId, currentTasting.TastingId) ?? new VoteModel()
                {
                    BeerId = tb.BeerId,
                    TasterId = currentTaster.TasterId,
                    TastingId = currentTasting.TastingId
                };
        }
    }
}

