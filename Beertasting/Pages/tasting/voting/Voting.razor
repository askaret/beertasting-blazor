@page "/tasting/vote/{TastingId:int}"
@page "/tasting/vote/{TastingId:int}/{Beernumber:int}"
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject IBeertastingRepository _db
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager _nav
@inject ISnackbar Snackbar

@if (currentTaster == null || currentTasting == null || (tastingBeers is null || !tastingBeers.Any()))
{
    <p><em>Loading...</em></p>
}
else
{
    <MudPaper class="mt-3">
        <MudCarousel @ref="_carousel" ItemsSource="@tastingBeers.OrderBy(x => x.SortOrder)" Style="height:110vh;" ShowArrows="true" ShowDelimiters="false" AutoCycle="false" SelectedIndexChanged="@IndexChanged" ArrowsPosition="Position.Top">
            <PreviousButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.ArrowBackIos" Color="@Color.Primary" />
                    </span>
                </div>
            </PreviousButtonTemplate>
            <NextButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Outlined.ArrowForwardIos" Color="@Color.Primary" />
                    </span>
                </div>
            </NextButtonTemplate>
            <ItemTemplate>
                <MudGrid>
                    <MudSpacer />
                    <MudItem xs="12" sm="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    <MudAvatar Color="Color.Default">@context.SortOrder</MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h4">@context.BeerModel.Name (@context.BeerModel.ABV %)</MudText>
                                    <MudText Typo="Typo.body1">@context.BeerModel.BeerStyleModel.Name - @context.BeerModel.BeerclassModel?.Name</MudText>
                                    <MudText Typo="Typo.body1">@context.BeerModel.BreweryModel.Name</MudText>
                                    <MudText Typo="Typo.body1">@context.BeerModel.BreweryModel.Country</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="12" Style="text-align:center;">
                        <MudItem xs="12" sm="12">
                            <MudText Typo="Typo.body1">Taste</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="12">
                            <MudRating FullIcon="@Icons.Material.Filled.LocalDrink" EmptyIcon="@Icons.Material.Outlined.LocalDrink" SelectedValue="@context.VoteModel.Taste" SelectedValueChanged="@((SelectedValue) => OnTasteChanged(SelectedValue, context))" MaxValue="6" Size="Size.Large" Color="@Color.Secondary" />
                        </MudItem>
                        <MudSpacer/>
                        <MudItem xs="12" sm="12">
                            <MudText Typo="Typo.body1">Appearance</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="12">
                            <MudRating FullIcon="@Icons.Material.Filled.RemoveRedEye" EmptyIcon="@Icons.Material.Outlined.RemoveRedEye" SelectedValue="@context.VoteModel.Appearance" SelectedValueChanged="@((SelectedValue) => OnAppearanceChanged(SelectedValue, context))" MaxValue="6" Size="Size.Large" Color="@Color.Primary" />
                        </MudItem>
                        <MudSpacer />
                        <MudItem xs="12" sm="12">
                            <MudText Typo="Typo.body1">Overall</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="12">
                            <MudRating FullIcon="@Icons.Material.Filled.Celebration" EmptyIcon="@Icons.Material.Outlined.Celebration" SelectedValue="@context.VoteModel.Overall" SelectedValueChanged="@((SelectedValue) => OnOverallChanged(SelectedValue, context))" MaxValue="6" Size="Size.Large" Color="@Color.Tertiary" />
                        </MudItem>
                        <MudSpacer />
                    </MudItem>
                    <MudItem xs="12" sm="12"><MudTextField Lines="3" TextChanged="@((Value) => NoteChanged(Value, context))" Label="Note (max 250 chars)" Value="context.VoteModel.Note" Variant="Variant.Outlined" MaxLength="250" /></MudItem>
                    <MudItem xs="12" sm="12"><MudButton Disabled="@(!context.IsDirty)" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="@(() => SaveVote(context))">SAVE</MudButton></MudItem>
                </MudGrid>
            </ItemTemplate>
        </MudCarousel>
    </MudPaper>
}

@code
{
    private MudCarousel<TastingBeerModel> _carousel;
    private IList<string> _source = new List<string>() { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

    [Parameter]
    public int TastingId { get; set; }

    [Parameter]
    public int BeerNumber { get; set; } = 0;
    private TastingModel? currentTasting = null;
    private TasterModel? currentTaster = null;
    private List<TastingBeerModel>? tastingBeers = null;

    private void OnTasteChanged(int value, TastingBeerModel tbm)
    {
        if (tbm.VoteModel?.Taste == value)
            return;

        tbm.VoteModel.Taste = value;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private void OnAppearanceChanged(int value, TastingBeerModel tbm)
    {
        if (tbm.VoteModel?.Appearance == value)
            return;

        tbm.VoteModel.Appearance = value;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private void OnOverallChanged(int value, TastingBeerModel tbm)
    {
        if (tbm.VoteModel?.Overall == value)
            return;

        tbm.VoteModel.Overall = value;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private async Task NoteChanged(string value, TastingBeerModel tbm)
    {
        if (string.Equals(value, tbm.VoteModel.Note, StringComparison.InvariantCultureIgnoreCase))
            return;

        tbm.VoteModel.Note = value;
        tbm.IsDirty = true;
        StateHasChanged();
    }

    private async Task SaveVote(TastingBeerModel tbm)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.VisibleStateDuration = 1;

        tbm.IsDirty = false;
        var vote = tbm.VoteModel;

        try
        {
            if (vote != null && vote.VoteId is null)
            {
                vote.Note = new(vote.Note.Take(250).ToArray());
                await _db.AddVote(vote);

                tbm.VoteModel = await _db.GetVote(tbm.VoteModel.TasterId, tbm.BeerId, tbm.TastingId);
            }
            else if (vote != null && vote.VoteId != null)
            {
                vote.Note = new(vote.Note.Take(250).ToArray());
                await _db.UpdateVote(vote);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Failed to save vote", Severity.Error);
            throw new Exception("Failed saving vote to database", e);
        }
        
        Snackbar.Add("Vote successfully saved", Severity.Success);
        StateHasChanged();
    }

    private async Task initializeTaster()
    {
        var retryCount = 10;
        while (currentTaster is null && retryCount-- > 0)
        {
            if (ProtectedSessionStore is null)
            {
                Thread.Sleep(100);
                continue;
            }

            var t = await ProtectedSessionStore.GetAsync<TasterModel>("taster");

            if (t.Success)
            {
                currentTaster = t.Value;
                break;
            }

            Thread.Sleep(50);
        }
        if (currentTaster is null)
            throw new Exception("Taster not found!");
    }

    private async Task IndexChanged(int index)
    {
        if (tastingBeers.Any(x => x.IsDirty))
        {
            foreach (var tbm in tastingBeers.Where(x => x.IsDirty))
            {
                await SaveVote(tbm);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await initializeTaster();

        currentTasting = await _db.GetTasting(TastingId);

        if (currentTasting == null)
        {
            _nav.NavigateTo("/tastingNotFound");
            return;
        }

        if (!currentTasting.IsActive)
        {
            _nav.NavigateTo("/nicetry");
            return;
        }

        tastingBeers = await _db.GetTastingBeers(TastingId);
        var votes = await _db.GetVotes(currentTaster.TasterId, TastingId);

        foreach (var tb in tastingBeers)
        {
            if (currentTasting.IsBlind)
                tb.Anonymize();

            tb.VoteModel = votes.FirstOrDefault(x => x.BeerId == tb.BeerId) ?? new VoteModel()
                {
                    BeerId = tb.BeerId,
                    TasterId = currentTaster.TasterId,
                    TastingId = currentTasting.TastingId
                };
        }
    }
}

