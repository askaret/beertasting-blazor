@page "/admin/taster"
@using Beertasting.ViewModels
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IBeertastingRepository _db
@inject NavigationManager _nav
@inject IDialogService DialogService

<AdminGate />

<MudText Typo="Typo.h3" Class="pa-4">Tasters</MudText>

<EditForm Model="@newTaster" OnValidSubmit="InsertTaster">
	<DataAnnotationsValidator />
	<MudCard>
		<MudCardContent>
			<MudText Typo="Typo.h4" Class="pa-4">New Taster</MudText>
			<MudGrid>
				<MudItem xs="12" sm="4">
					<MudTextField Label="Email address" @bind-Value="newTaster.EmailAddress" For="@(() => newTaster.EmailAddress)" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudTextField Label="Display name" @bind-Value="newTaster.DisplayName" For="@(() => newTaster.DisplayName)" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudCheckBox Label="Is administrator" @bind-Value="newTaster.IsAdmin" For="@(() => newTaster.IsAdmin)" Variant="Variant.Outlined" />
				</MudItem>
			</MudGrid>
		</MudCardContent>
		<MudCardActions>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ml-auto">SAVE</MudButton>
		</MudCardActions>
	</MudCard>
</EditForm>

@if (!tasters.Any())
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@tasters.OrderBy(x => x.EmailAddress)" Dense="false" Hover="true" RowsPerPage=100 Bordered="true" Striped="true" Filter="new Func<TasterModel,bool>(TableFilterFunction)" @bind-SelectedItem="SelectedTaster">
		<ToolBarContent>
			<MudText Typo="Typo.h4" Class="pa-4">All tasters</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="tableSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<TasterModel, object>(x => x.DisplayName)">Display name</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<TasterModel, object>(x => x.EmailAddress)">E-mail address</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<TasterModel, object>(x => x.IsAdmin)">Administrator</MudTableSortLabel></MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Display name">@context.DisplayName</MudTd>
			<MudTd DataLabel="E-mail address">@context.EmailAddress</MudTd>
			<MudTd DataLabel="Administrator"><MudCheckBox Checked="@context.IsAdmin" Disabled="true" ReadOnly="true" /></MudTd>
		<MudTd>
			<MudIconButton Icon="@Icons.Material.Outlined.Edit" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="@(() => EditTaster(context))" />
			<MudIconButton Icon="@Icons.Material.Outlined.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteTaster(context))" />
		</MudTd>
	</RowTemplate>
</MudTable>
}

@code {
	public CultureInfo _nb = CultureInfo.GetCultureInfo("nb-NO");
	private List<TasterModel> tasters = new List<TasterModel>();
	public TasterViewModel newTaster = new TasterViewModel();
	private TasterModel SelectedTaster;
	private string tableSearchString = "";
	public bool showDeleteConfirm;

	private bool TableFilterFunction(TasterModel taster) => TableFilter(taster, tableSearchString);

	private async void DeleteTaster(TasterModel taster)
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", $"Confirm deletion of \"{taster.EmailAddress} \\ {taster.DisplayName}\"");
		parameters.Add("ButtonText", "DELETE");
		parameters.Add("Color", Color.Error);

		var dialog = DialogService.Show<QueryDialog>("Delete taster", parameters);
		var result = await dialog.Result;

		if (result.Cancelled) return;

		await _db.DeleteTaster(taster);
		tasters.Remove(taster);
		StateHasChanged();
	}

	private bool TableFilter(TasterModel taster, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (taster.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (taster.EmailAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	protected override async Task OnInitializedAsync()
	{
		tasters = await _db.GetTasters();		
	}

	private void EditTaster(TasterModel? taster)
	{
		_nav.NavigateTo($"/admin/taster/edit/{taster?.TasterId}");
	}

	private async Task InsertTaster()
	{
		var added = newTaster.ToTasterModel();

		await _db.AddTaster(added);
		tasters = await _db.GetTasters();
		newTaster = new TasterViewModel();
	}
}