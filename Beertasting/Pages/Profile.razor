@page "/profile"

@using Microsoft.Identity.Web
@using Microsoft.Graph
@using Beertasting.ViewModels
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IBeertastingRepository _db;

<MudText Typo="Typo.h3" Class="pa-4">User profile</MudText>

@if (user == null || currentTaster == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">@user.DisplayName.Substring(0, 1)</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@user.DisplayName</MudText>
                <MudText Typo="Typo.body2">@user.JobTitle</MudText>
                <MudText Typo="Typo.body2">@user.Mail</MudText>
                @if (currentTaster.IsAdmin)
                {
                    <MudText Typo="Typo.body1" Color="Color.Error">ADMIN</MudText>
                }
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="align-content: center">
            <img style="margin: 5px 0; height: 250px;" src="data:image/jpeg;base64, @photo" />
        </MudCardContent>
    </MudCard>

    <EditForm Model="@currentTaster" OnValidSubmit="SaveDisplayName">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Display name" @bind-Value="currentTaster.DisplayName" For="@(() => currentTaster.DisplayName)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Success">SAVE</MudButton>
                        </MudCardActions>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </EditForm>

    <MudTable Items=@tastings.OrderBy(x => x.TastingDate) Hover="true" Bordered="false" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h4" Class="pa-4">My tastings</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Tasting Date</MudTh>
            <MudTh>Results</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=Name>@context.Name</MudTd>
            <MudTd DataLabel=Description>@context.Description</MudTd>
            <MudTd DataLabel=TastingDate>@context.TastingDate</MudTd>
            <MudTd><MudIconButton Link=@string.Concat("/tasting/result/", context.TastingId) Icon="@Icons.Material.Outlined.ShowChart" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>

    <MudTable Items=@votedBeers Hover="true" Bordered="false" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h4" Class="pa-4">My favorite beers</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>ABV %</MudTh>
            <MudTh>Brewery</MudTh>
            <MudTh>Taste</MudTh>
            <MudTh>Appearance</MudTh>
            <MudTh>Overall</MudTh>
            <MudTh>URL</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=Name>@context.BeerName</MudTd>
            <MudTd DataLabel=Name>@context.ABV %</MudTd>
            <MudTd DataLabel=Brewery>@context.BreweryName</MudTd>
            <MudTd DataLabel=Taste>@context.Taste</MudTd>
            <MudTd DataLabel=Appearance>@context.Appearance</MudTd>
            <MudTd DataLabel=Overall>@context.Overall</MudTd>
            <MudTd DataLabel="URL">
                @{
                    if (!string.IsNullOrEmpty(context?.RateBeerLink))
                    {
                    <MudIconButton Link="@context.RateBeerLink" Target="_blank" Icon="@Icons.Material.Outlined.Link" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                    }
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    Microsoft.Graph.User? user;
    string photo = "";
    string displayname = "";
    private TasterModel? currentTaster;
    private List<TastingModel> tastings = new List<TastingModel>();
    private List<TasterBeerModelVotes> votedBeers = new List<TasterBeerModelVotes>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
            photo = await GetPhoto();

            currentTaster = await _db.GetTaster(user.Mail);

            if (currentTaster is null)
            {
                currentTaster = new TasterModel()
                    {
                        DisplayName = user.DisplayName,
                        EmailAddress = user.Mail,
                        IsAdmin = false
                    };
                await _db.AddTaster(currentTaster);

                currentTaster = await _db.GetTaster(user.Mail);
            }

            tastings = await _db.GetTastingsForTaster(currentTaster.TasterId);
            votedBeers = await _db.GetTasterBeerVotes(currentTaster.TasterId);
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task SaveDisplayName()
    {
        await _db.UpdateTaster(currentTaster);
        StateHasChanged();
    }
    protected async Task<string> GetPhoto()
    {
        string photo;

        try
        {
            using (var photoStream = await GraphServiceClient.Me.Photo.Content.Request().GetAsync())
            {
                byte[] photoByte = ((System.IO.MemoryStream)photoStream).ToArray();
                photo = Convert.ToBase64String(photoByte);
                this.StateHasChanged();
            }

        }
        catch (Exception)
        {
            photo = "";
        }
        return photo;
    }
}
