@page "/profile"

@using Beertasting.Services
@using Beertasting.Util
@using Beertasting.ViewModels
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IBeertastingRepository _db;
@inject ITasterService tasterService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<MudText Typo="Typo.h3" Class="pa-4">User profile</MudText>

@if (tasterVM == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">@tasterVM.DisplayName.Substring(0, 1)</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@tasterVM.DisplayName</MudText>
                <MudText Typo="Typo.body2">@tasterVM.JobTitle</MudText>
                <MudText Typo="Typo.body2">@tasterVM.EmailAddress</MudText>
                @if (tasterVM.IsAdmin)
                {
                    <MudText Typo="Typo.body1" Color="Color.Error">ADMIN</MudText>
                }
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="align-content: center">
            <img style="margin: 5px 0; height: 250px;" src="data:image/jpeg;base64, @tasterVM.Photo" />
        </MudCardContent>
    </MudCard>

    <EditForm Model="@tasterVM" OnValidSubmit="SaveDisplayName">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Display name (max 18 char)" @bind-Value="tasterVM.DisplayName" For="@(() => tasterVM.DisplayName)" Variant="Variant.Outlined" MaxLength="18"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Success">SAVE</MudButton>
                        </MudCardActions>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </EditForm>

    <MudTable Items=@tastings.OrderBy(x => x.TastingDate) Hover="true" Bordered="false" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h4" Class="pa-4">My tastings</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Tasting Date</MudTh>
            <MudTh>Results</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=Name>@context.Name</MudTd>
            <MudTd DataLabel=Description>@context.Description</MudTd>
            <MudTd DataLabel=TastingDate>@context.TastingDate</MudTd>
            <MudTd><MudIconButton Link=@string.Concat("/tasting/result/", context.TastingId) Icon="@Icons.Material.Outlined.ShowChart" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>

    <MudTable Items=@votedBeers Hover="true" Bordered="false" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h4" Class="pa-4">My favorite beers</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>ABV %</MudTh>
            <MudTh>Brewery</MudTh>
            <MudTh>Taste</MudTh>
            <MudTh>Appearance</MudTh>
            <MudTh>Overall</MudTh>
            <MudTh>URL</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=Name>@context.BeerName</MudTd>
            <MudTd DataLabel=Name>@context.ABV %</MudTd>
            <MudTd DataLabel=Brewery>@context.BreweryName</MudTd>
            <MudTd DataLabel=Taste>@context.Taste</MudTd>
            <MudTd DataLabel=Appearance>@context.Appearance</MudTd>
            <MudTd DataLabel=Overall>@context.Overall</MudTd>
            <MudTd DataLabel="URL">
                @{
                    if (!string.IsNullOrEmpty(context?.RateBeerLink))
                    {
                    <MudIconButton Link="@context.RateBeerLink" Target="_blank" Icon="@Icons.Material.Outlined.Link" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                    }
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    TasterViewModel? tasterVM = null;
    string displayname = "";
    private TasterModel? currentTaster;
    private List<TastingModel> tastings = new List<TastingModel>();
    private List<TasterBeerVoteModel> votedBeers = new List<TasterBeerVoteModel>();

    protected override async Task OnInitializedAsync()
    {
        tasterVM = await localStorage.GetItemAsync<TasterViewModel>(CacheKeys.PROFILE);
        if (tasterVM == null || tasterVM.TasterId == 0 || tasterVM.Checksum != await sessionStorage.GetItemAsync<string>(CacheKeys.CHECKSUM)) {
            tasterVM = await tasterService.GetTasterVM();
            await localStorage.SetItemAsync<TasterViewModel>(CacheKeys.PROFILE, tasterVM);
            await sessionStorage.SetItemAsync<string>(CacheKeys.CHECKSUM, tasterVM.Checksum);
        }
        tastings = await _db.GetTastingsForTaster(tasterVM.TasterId);
        votedBeers = await _db.GetTasterBeerVotes(tasterVM.TasterId);
        
    }

    private async Task SaveDisplayName()
    {
        if (tasterVM != null) {
            await _db.UpdateTaster(tasterVM.ToTasterModel());
        }
        StateHasChanged();
    }
}
