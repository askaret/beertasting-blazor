@page "/tasting"
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject IBeertastingRepository _db

<MudText Typo="Typo.h3" Class="pa-4">Tastings</MudText>

@if (activeTastings is not null && activeTastings.Any())
{
    <MudTable Items="@activeTastings" Hover="true" Striped="true" Bordered="false">
        <ToolBarContent>
			<MudText Typo="Typo.h4" Class="pa-4">Active tastings</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Date</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Date">@context.TastingDate</MudTd>
            <MudTd DataLabel="Voting"><MudIconButton Link=@string.Concat("/tasting/vote/", context.TastingId) Icon="@Icons.Material.Outlined.HowToVote" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>

}
@if (oldTastings is null)
{
    <p><em>Loading...</em></p>
} 
else
{
    <MudTable Items="@oldTastings" Hover="true" Striped="true" Bordered="false">
        <ToolBarContent>
			<MudText Typo="Typo.h4" Class="pa-4">Old tastings</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Date</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Date">@context.TastingDate</MudTd>
            <MudTd DataLabel="Results"><MudIconButton Link=@string.Concat("/tasting/result/", context.TastingId) Icon="@Icons.Material.Outlined.ShowChart" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>
}

@code
{
    private List<TastingModel>? activeTastings;
    private List<TastingModel>? oldTastings;

    protected override async Task OnInitializedAsync()
    {
        var tastings = await _db.GetTastings();

        activeTastings = tastings.Where(t => t.IsActive).OrderByDescending(t => t.TastingDate).ToList();
        oldTastings = tastings.Where(t => !t.IsActive).OrderByDescending(t => t.TastingDate).ToList();
    }
}
