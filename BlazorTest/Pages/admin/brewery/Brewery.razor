@page "/admin/brewery"
@using BlazorTest.ViewModels
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IBeertastingRepository _db
@inject NavigationManager _nav
@inject IDialogService DialogService

<MudText Typo="Typo.h3" Class="pa-4">Breweries</MudText>

<EditForm Model="@newBrewery" OnValidSubmit="InsertBrewery">
	<DataAnnotationsValidator />
	<MudCard>
		<MudCardContent>
			<MudText Typo="Typo.h4" Class="pa-4">New brewery</MudText>
			<MudGrid>
				<MudItem xs="12" sm="4">
					<MudTextField Label="Name" @bind-Value="newBrewery.Name" For="@(() => newBrewery.Name)" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudTextField Label="Country" @bind-Value="newBrewery.Country" For="@(() => newBrewery.Country)" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudTextField Label="Website" @bind-Value="newBrewery.Website" For="@(() => newBrewery.Website)" Variant="Variant.Outlined" />
				</MudItem>
			</MudGrid>
		</MudCardContent>
		<MudCardActions>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ml-auto">SAVE</MudButton>
		</MudCardActions>
	</MudCard>
</EditForm>

@if (!breweries.Any())
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@breweries.OrderBy(x => x.Name)" Dense="false" Hover="true" RowsPerPage=100 Bordered="false" Striped="true" Filter="new Func<BreweryModel,bool>(TableFilterFunction)" @bind-SelectedItem="SelectedBrewery">
		<ToolBarContent>
			<MudText Typo="Typo.h4" Class="pa-4">All breweries</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="tableSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<BreweryModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<BreweryModel, object>(x => x.Country)">Country</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<BreweryModel, object>(x => x.Website)">URL</MudTableSortLabel></MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="Country">@context.Country</MudTd>
			<MudTd DataLabel="URL">
				@{
					if (!string.IsNullOrEmpty(context.Website))
					{
					<MudIconButton Link="@context.Website" Target="_blank" Icon="@Icons.Material.Outlined.Link" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
					}
				}
			</MudTd>
		<MudTd>
			<MudIconButton Icon="@Icons.Material.Outlined.Edit" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="@(() => EditBrewery(context))" />
			<MudIconButton Icon="@Icons.Material.Outlined.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteBrewery(context))" />
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>
}

@code {
	public CultureInfo _nb = CultureInfo.GetCultureInfo("nb-NO");
	private List<BreweryModel> breweries = new List<BreweryModel>();
	public BreweryViewModel newBrewery = new BreweryViewModel();
	private BreweryModel SelectedBrewery = new BreweryModel();
	private string tableSearchString = "";
	public bool showDeleteConfirm;

	private bool TableFilterFunction(BreweryModel brewery) => TableFilter(brewery, tableSearchString);

	private async void DeleteBrewery(BreweryModel brewery)
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", $"Confirm deletion of \"{brewery.Name}\"");
		parameters.Add("ButtonText", "DELETE");
		parameters.Add("Color", Color.Error);

		var dialog = DialogService.Show<DeleteDialog>("Delete brewery", parameters);
		var result = await dialog.Result;

		if (result.Cancelled) return;

		await _db.DeleteBrewery(brewery);
		breweries.Remove(brewery);
		StateHasChanged();
	}

	private bool TableFilter(BreweryModel brewery, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (brewery.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (brewery.Country.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	protected override async Task OnInitializedAsync()
	{
		breweries = await _db.GetBreweries();		
	}

	private void EditBrewery(BreweryModel? brewery)
	{
		_nav.NavigateTo($"/admin/brewery/edit/{brewery?.BreweryId}");
	}

	private async Task InsertBrewery()
	{
		var added = new BreweryModel()
			{
				Name = newBrewery.Name,
				Website = newBrewery.Website,
				Country = newBrewery.Country
			};

		await _db.AddBrewery(added);
		breweries = await _db.GetBreweries();
		newBrewery = new BreweryViewModel();
	}
}