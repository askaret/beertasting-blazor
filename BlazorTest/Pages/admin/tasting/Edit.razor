@page "/admin/tasting/edit"
@page "/admin/tasting/edit/{Id:int}"

@using BlazorTest.ViewModels
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject IBeertastingRepository _db
@inject NavigationManager _nav

<EditForm Model="@tasting">
    <DataAnnotationsValidator />
    <MudCard Elevation="2" Outlined="true">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@headerTag tasting</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pa-4">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField Label=Name @bind-Value="tasting.Name" For="@(() => tasting.Name)"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label=Description @bind-Value="tasting.Description" For="@(() => tasting.Description)"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Label=TastingDate @bind-Date="tasting.TastingDate" For="@(() => tasting.TastingDate)"></MudDatePicker>
                </MudItem>
                <MudItem xs="6">
                    <MudTimePicker Label=TastingTime @bind-Time="tasting.TastingTime" For="@(() => tasting.TastingTime)"></MudTimePicker>
                </MudItem>
                <MudItem xs="3">
                    <MudCheckBox Label=Active @bind-Checked="tasting.IsActive" For="@(() => tasting.IsActive)"></MudCheckBox>
                </MudItem>
                <MudItem xs="3">
                    <MudCheckBox Label=Blind @bind-Checked="tasting.IsBlind" For="@(() => tasting.IsBlind)"></MudCheckBox>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" OnClick="@InsertOrUpdateTasting" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@headerTag</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
<MudTable Items="@tastingBeers" >
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Brewery</MudTh>
        <MudTh>ABV %</MudTh>
        <MudTh>Ratebeer</MudTh>
        <MudTh><MudButton Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined" OnClick="@(() => AddBeer())">Add Beer</MudButton></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Outlined.ArrowUpward" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => SwitchBeerSortOrder(context.SortOrder, context.SortOrder-1))"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Outlined.ArrowDownward" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => SwitchBeerSortOrder(context.SortOrder, context.SortOrder+1))"></MudIconButton>
        </MudTd>
        <MudTd DataLabel="Name">@context.BeerModel?.Name</MudTd>
        <MudTd DataLabel="Brewery">@context.BeerModel?.BreweryModel?.Name</MudTd>
        <MudTd DataLabel="ABV %">@context.BeerModel?.ABV</MudTd>
        <MudTd DataLabel="Ratebeer">@{
        if (!string.IsNullOrEmpty(context.BeerModel?.RateBeerLink))
                {
                    <MudIcon Icon="@Icons.Material.Outlined.Link" Color="Color.Primary" />
                }    
        }</MudTd>
        <MudTd><MudButton Color="Color.Secondary" Size="Size.Small" Variant="Variant.Outlined" OnClick="@(() => RemoveBeer(context.TastingBeerId))">Remove</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    [Parameter]
    public int? Id { get; set; }

    private string headerTag = "Add";
    private TastingViewModel tasting = new TastingViewModel();
    private List<TastingBeerViewModel> tastingBeers { get; set; } = new List<TastingBeerViewModel>();
    private List<BeerModel> beers { get; set; } = new List<BeerModel>();
    private List<BreweryModel> breweries { get; set; } = new List<BreweryModel>();
    private List<BeerstyleModel> beerStyles { get; set; } = new List<BeerstyleModel>();
    private List<BeerclassModel> beerClasses { get; set; } = new List<BeerclassModel>();

    protected override async Task OnInitializedAsync()
    {
        beers = await _db.GetBeers();
        breweries = await _db.GetBreweries();
        beerStyles = await _db.GetBeerstyles();
        beerClasses = await _db.GetBeerclasses();

        foreach (var beer in beers)
        {
            beer.BeerclassModel = beerClasses.SingleOrDefault(bc => bc.BeerClassId == beer.BeerClassId);
            beer.BreweryModel = breweries.SingleOrDefault(b => b.BreweryId == beer.BreweryId);
            beer.BeerStyleModel = beerStyles.SingleOrDefault(bs => bs.BeerStyleId == beer.BeerStyleId);
        }

        if (Id is null)
        {
            headerTag = "Add";
            tasting = new TastingViewModel();
        }
        else
        {
            headerTag = "Edit";
            tasting = new TastingViewModel(await _db.GetTasting(Id.Value));
            tastingBeers = (await _db.GetTastingBeers(Id.Value)).Select(tb => new TastingBeerViewModel() {TastingBeerId = tb.TastingBeerId, TastingId = tb.TastingId, SortOrder = tb.SortOrder, BeerModel = beers.SingleOrDefault(b => b.BeerId == tb.BeerId)}).OrderBy(tb => tb.SortOrder).ToList();
        }
    }

    private async void InsertOrUpdateTasting()
    {
        var editedTasting = new TastingModel()
            {
                TastingId = tasting.TastingId,
                Name = tasting.Name,
                Description = tasting.Description,
                IsActive = tasting.IsActive,
                IsBlind = tasting.IsBlind,
                TastingDate = new DateTime(tasting.TastingDate.Value.Year, tasting.TastingDate.Value.Month, tasting.TastingDate.Value.Day, tasting.TastingTime.Value.Hours, tasting.TastingTime.Value.Minutes, tasting.TastingTime.Value.Seconds)
            };

        if (editedTasting.TastingId == -1)
            await _db.AddTasting(editedTasting);
        else
            await _db.EditTasting(editedTasting);

        _nav.NavigateTo("/admin/tasting");
    }

    private async void RemoveBeer(int tastingBeerId)
    {
        var tastingBeer = tastingBeers.SingleOrDefault(tb => tb.TastingBeerId == tastingBeerId);
        if (tastingBeer is null)
            return;

        await _db.RemoveTastingResult(tastingBeer.TastingId, tastingBeer.BeerModel.BeerId);
        await _db.RemoveVotes(tastingBeer.TastingId, tastingBeer.BeerModel.BeerId);
        await _db.RemoveTastingBeer(tastingBeerId);
        tastingBeers.Remove(tastingBeers.Single(tb => tb.TastingBeerId == tastingBeerId));
        StateHasChanged();
    }

    private void AddBeer()
    {
        _nav.NavigateTo(@"/admin/tasting/addbeer/{Id}");
    }

    private async void SwitchBeerSortOrder(int sortOrder, int otherSortOrder)
    {
        var beerToSwitch = tastingBeers.SingleOrDefault(tb => tb.SortOrder == sortOrder);
        var otherBeerToSwitch = tastingBeers.SingleOrDefault(tb => tb.SortOrder == otherSortOrder);

        if (beerToSwitch is null || otherBeerToSwitch is null)
            return;

        var tmpSortOrder = beerToSwitch.SortOrder;
        beerToSwitch.SortOrder = otherBeerToSwitch.SortOrder;
        otherBeerToSwitch.SortOrder = tmpSortOrder;

        await _db.EditTastingBeer(beerToSwitch.ToDto());
        await _db.EditTastingBeer(otherBeerToSwitch.ToDto());

        tastingBeers = tastingBeers.OrderBy(tb => tb.SortOrder).ToList();

        StateHasChanged();
    }
}