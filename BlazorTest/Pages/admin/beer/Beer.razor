@page "/admin/beer"
@using BlazorTest.ViewModels
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IBeertastingRepository _db
@inject NavigationManager _nav
@inject IDialogService DialogService

<MudText Typo="Typo.h3">Beer</MudText>
<MudText Typo="Typo.h4">New beer</MudText>

<EditForm Model="@newBeer" OnValidSubmit="InsertBeer">
	<DataAnnotationsValidator />
	<MudCard>
		<MudCardContent>
			<MudGrid>
				<MudItem xs="12" sm="5">
					<MudTextField Label="Name" @bind-Value="newBeer.Name" For="@(() => newBeer.Name)" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="2">
					<MudNumericField T="float" @bind-Value="newBeer.ABV" For="@(() => newBeer.ABV)" Immediate="true" Label="ABV" Format="N2" Culture="@_nb" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="5">
					<MudTextField Label="Ratebeer" @bind-Value="newBeer.RateBeerLink" For="@(() => newBeer.RateBeerLink)" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudSelect T="int" Label="Style" @bind-Value="newBeer.BeerStyleId" For="@(() => newBeer.BeerStyleId)" Strict="true" Variant="Variant.Outlined">
						@foreach (var style in styles.OrderBy(x => x.Name))
						{
							<MudSelectItem Value="@style.BeerStyleId">@style.Name</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudSelect T="int" Label="Class" @bind-Value="newBeer.BeerClassId" For="@(() => newBeer.BeerClassId)" Strict="true" Variant="Variant.Outlined">
						@foreach (var beerclass in classes.OrderBy(x => x.Name))
						{
							<MudSelectItem Value="@beerclass.BeerClassId">@beerclass.Name</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem xs="12" sm="4">
					<MudSelect T="int" Label="Brewery" @bind-Value="newBeer.BreweryId" For="@(() => newBeer.BreweryId)" Strict="true" Variant="Variant.Outlined">
						@foreach (var brewery in breweries.OrderBy(x => x.Name))
						{
							<MudSelectItem Value="@brewery.BreweryId">@brewery.Name (@brewery.Country)</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
			</MudGrid>
		</MudCardContent>
		<MudCardActions>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ml-auto">Save</MudButton>
		</MudCardActions>
	</MudCard>
</EditForm>

@if (!beers.Any())
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@beers" Dense="false" Hover="true" RowsPerPage=100 Bordered="true" Striped="true" Filter="new Func<BeerModel,bool>(TableFilterFunction)" @bind-SelectedItem="SelectedBeer">
		<ToolBarContent>
			<MudText Typo="Typo.h6">All beers</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="tableSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<BeerModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<BeerModel, object>(x => x.BreweryModel != null ? x.BreweryModel.Name : string.Empty)">Brewery</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<BeerModel, object>(x => x.ABV)">ABV %</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<BeerModel, object>(x => x.BeerStyleModel != null ? x.BeerStyleModel.Name : string.Empty)">Style</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<BeerModel, object>(x => x.BeerclassModel != null ? x.BeerclassModel.Name : string.Empty)">Class</MudTableSortLabel></MudTh>
			<MudTh>URL</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="Brewery">@(context.BreweryModel == null ? "" : context.BreweryModel.Name)</MudTd>
			<MudTd DataLabel="ABV %">@context.ABV</MudTd>
			<MudTd DataLabel="Style">@(context.BeerStyleModel == null ? "" : context.BeerStyleModel.Name)</MudTd>
			<MudTd DataLabel="Class">@(context.BeerclassModel == null ? "" : context.BeerclassModel.Name)</MudTd>
			<MudTd DataLabel="URL">
				@{
					if (!string.IsNullOrEmpty(context?.RateBeerLink))
					{
					<MudIconButton Link="@context.RateBeerLink" Target="_blank" Icon="@Icons.Material.Outlined.Link" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
					}
			}
		</MudTd>
		<MudTd>
			<MudIconButton Icon="@Icons.Material.Outlined.Edit" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="@(() => EditBeer(context))" />
			<MudIconButton Icon="@Icons.Material.Outlined.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteBeer(context))" />
		</MudTd>

	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>
}

@code {
	public CultureInfo _nb = CultureInfo.GetCultureInfo("nb-NO");
	private List<BeerModel> beers = new List<BeerModel>();
	private List<BeerstyleModel> styles = new List<BeerstyleModel>();
	private List<BeerclassModel> classes = new List<BeerclassModel>();
	private List<BreweryModel> breweries = new List<BreweryModel>();
	private BeerModel SelectedBeer = new BeerModel();
	public BeerViewModel newBeer = new BeerViewModel();

	private string tableSearchString = "";
	public bool showDeleteConfirm;

	private bool TableFilterFunction(BeerModel beer) => TableFilter(beer, tableSearchString);

	private async void DeleteBeer(BeerModel beer)
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", $"Confirm deletion of \"{beer.Name}\"");
		parameters.Add("ButtonText", "DELETE");
		parameters.Add("Color", Color.Error);

		var dialog = DialogService.Show<DeleteDialog>("Delete beer", parameters);
		var result = await dialog.Result;

		if (result.Cancelled) return;

		await _db.DeleteBeer(beer);
		beers.Remove(beer);
		StateHasChanged();
	}

	private bool TableFilter(BeerModel beer, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (beer.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (beer.BreweryModel != null && beer.BreweryModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	protected override async Task OnInitializedAsync()
	{
		styles = await _db.GetBeerstyles();
		classes = await _db.GetBeerclasses();
		breweries = await _db.GetBreweries();

		var localBeers = await _db.GetBeers();

		foreach (var beer in localBeers)
		{
			beer.BeerclassModel = classes.FirstOrDefault(x => x.BeerClassId == beer.BeerClassId);
			beer.BeerStyleModel = styles.FirstOrDefault(x => x.BeerStyleId == beer.BeerStyleId);
			beer.BreweryModel = breweries.FirstOrDefault(x => x.BreweryId == beer.BreweryId);
		}

		beers = localBeers;
	}

	private void EditBeer(BeerModel? beer)
	{
		_nav.NavigateTo($"/admin/beer/edit/{beer?.BeerId}");
	}

	private async Task InsertBeer()
	{
		var added = new BeerModel()
			{
				Name = newBeer.Name,
				ABV = newBeer.ABV,
				RateBeerLink = newBeer.RateBeerLink,
				BeerClassId = newBeer.BeerClassId,
				BeerStyleId = newBeer.BeerStyleId,
				BreweryId = newBeer.BreweryId,
				BeerclassModel = classes.First(x => x.BeerClassId == newBeer.BeerClassId),
				BeerStyleModel = styles.First(x => x.BeerStyleId == newBeer.BeerStyleId),
				BreweryModel = breweries.First(x => x.BreweryId == newBeer.BreweryId)
			};

		await _db.AddBeer(added);
		beers.Add(added);
		newBeer = new BeerViewModel();
	}
}
